// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/02/2019 16:55:00"
                                                                                
// Verilog Test Bench template for design : ADDER_TREE
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ADDER_TREE_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg [7:0] data_in1;
reg [7:0] data_in2;
reg ena;
reg rst_n;
// wires                                               
wire [16:0]  data_out;
wire done;
wire [6:0]  pipe;

// assign statements (if any)                          
ADDER_TREE i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in1(data_in1),
	.data_in2(data_in2),
	.data_out(data_out),
	.done(done),
	.ena(ena),
	.pipe(pipe),
	.rst_n(rst_n)
);
initial                                                
begin                                                  
    #10 rst_n = 0;
    #10 rst_n = 1;
    #10 clk = 0;
	 #10 ena = 0;
	 #10 ena = 1;
	 #20 ;
	 data_in1 = 12;
	 data_in2 = 5;
	 #40 ;
	 data_in1 = 127;
	 data_in2 = 127;
	 #40 ;
	 data_in1 = -100;
	 data_in2 = 80;
//	 #40 ;
//	 data_in1 = -10;
//	 data_in2 = -80;
//	 #40 ;
//	 data_in1 = -30;
//	 data_in2 = -10;
//	 #40 ;
//	 data_in1 = 20;
//	 data_in2 = -126;
	 #40 ;
	 data_in1 = -128;
	 data_in2 = 126;
    
	 #1500;
	 $stop;
$display("Running testbench");                       
end   
initial    
begin  
forever 
	  begin
		 #20 clk <= !clk;
	  end
end                                                 
always                                                 
begin                                                  

@eachvec;                                              
// --> end                                             
end         
endmodule

